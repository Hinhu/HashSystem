package sha256;

import org.openjdk.jmh.annotations.*;
import org.openjdk.jmh.runner.Runner;
import org.openjdk.jmh.runner.options.Options;
import org.openjdk.jmh.runner.options.OptionsBuilder;
import org.openjdk.jmh.runner.options.TimeValue;

public class sha256Benchmark {
    @State(Scope.Thread)
    public static class MyState{

        Sha256 sha256 = new Sha256();

        public String oneLetterString = "A";

        public String tenLettersString = "vlyjfHwAGI";

        public String thousandLettersString = "h50l9EpgnNGYa4Sak0LjiJDjmEvWj8EIt3F5BofUSHhsemDRYRkGxOVeEWeYrMCOhPsCwiYdixJ0NQTqx9fUpvol8pKSBEHYtvUTqYhxBKdXTfOElEnErmiY5mWGYMsR5u1XIhiSSjkDjwgBWxXKitfka5BioBEnuW4lon1U1Q8B1N42OC1VeAOUzqx1ZCIQQBHbjYRPkPNPVO49eZtZyK3yudoOaKm9paDs6E4KssCc1Z3iqCvhFXyqiueBfp04H1yGqMflPkuvmlyN55gHFrS4HeCV0tAYI44c3qnxAvTtPf8hDQnpG2Tc3BZF4slbGF7cxXIg0RGzGgs9pAsD72Fhnqa8H3XsJUa6y32iU5umn21eV3ZJulZdPAcOHkITJbDNsb5eV6gJPOW0ZZ8YHpHY4CMzuQDST46ECcev1fEAiDTYiPIxOEzaz9Om9UQKsSZ792fm9lZW4NPzkWgs8WOML4VLmxvEwm0NOrgsbSHJlGy06EhlqmO941XvWWxErfa4JPLv8kzgpRIdmP0xVzsfYpg0mg0Bkm7ub4Ia6hg1IReqo5ECngipdgY9LqxjjYVafENqGyRjLZdyyQsgY5EnUPfeNVDDqr6NzsRTOK0LSy12qzhOyOGestZz0B5JCzWrwtE212D7bgl26m9f2kNbyP5iLVenWJDpe9AdEEMKW0wRgevz3249VHS4OWEYX6Y7kCeAXso86deakPxma4QhfnD3vWImPiAy6wE2BRr4u89DxfdEF6KvQp0rBix2xTmAiHA50EwfenD0zfRJeN0OnMMtPYaN4kQQkLWVCAbeBfpGELJOGqAwgtdOHFkdb6J5VCLgF72eIEuKUkoyU9GtmijIA9i1wf9GdwB7dhQzchTcoGT4BDSGdmAaDgfVBjOssQBk3rgmykap7xlC17r7PDlpOneGLm82vpyBTqQTjx58CfMMg4qXJUAKbJIxAgBJLWsuQakNm0wVamjRitLgaD5V81wRklTNLc8j\n";

        public String tenthousandLettersString = "";
    }

    @Benchmark
    public String oneLetterBenchmark(MyState state) throws Exception {
        return state.sha256.getHash(state.oneLetterString);
    }

    @Benchmark
    public String tenLetterBenchmark(MyState state) throws Exception {
        return state.sha256.getHash(state.tenLettersString);
    }
    @Benchmark
    public String thousandLetterBenchmark(MyState state) throws Exception {
        return state.sha256.getHash(state.thousandLettersString);
    }
    @Benchmark
    public String tenThousandLetterBenchmark(MyState state) throws Exception {
        return state.sha256.getHash(state.tenthousandLettersString);
    }

    public static void main(String[] args) throws Exception {
        Options opt = new OptionsBuilder()
                .include(sha256Benchmark.class.getSimpleName())
                .forks(1)
                .mode(Mode.All)
                .measurementIterations(10)
                .measurementTime(TimeValue.milliseconds(150))
                .warmupIterations(10)
                .warmupTime(TimeValue.milliseconds(150))
                .build();

        new Runner(opt).run();
    }
}
